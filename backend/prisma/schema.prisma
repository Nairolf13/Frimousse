model Parent {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  user      User?    @relation("UserParent")
  children  ParentChild[]
  photoConsents PhotoConsent[] @relation("ParentPhotoConsents")
  center    Center?  @relation(fields: [centerId], references: [id])
  centerId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ParentChild {
  id        String   @id @default(uuid())
  parent    Parent   @relation(fields: [parentId], references: [id])
  parentId  String
  child     Child    @relation(fields: [childId], references: [id])
  childId   String
  createdAt DateTime @default(now())
}
enum Sexe {
  masculin
  feminin
}
enum Availability {
  Disponible
  En_cong√©
  Maladie
}

enum NannyRole {
  Nounou_Senior
  Responsable
  Stagiaire
  Remplacante
  Autre
}

enum ChildGroup {
  G1 // Groupe 1 (0-1 ans)
  G2 // Groupe 2 (1-2 ans)
  G3 // Groupe 3 (2-3 ans)
  G4 // Groupe 4 (3-4 ans)
  G5 // Groupe 5 (4-5 ans)
  G6 // Groupe 6 (5-6 ans)
  Autre
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  name          String
  role          String  
  stripeCustomerId String?
  nanny         Nanny?   @relation("NannyUser", fields: [nannyId], references: [id])
  nannyId       String?  @unique
  parent        Parent?  @relation("UserParent", fields: [parentId], references: [id])
  parentId      String?  @unique
  center        Center?  @relation(fields: [centerId], references: [id])
  centerId      String?
  refreshTokens RefreshToken[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  feedPosts      FeedPost[]
  feedLikes      FeedLike[]
  feedComments   FeedComment[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Nanny {
  id         String   @id @default(uuid())
  name       String
  role       NannyRole @default(Nounou_Senior)
  contact    String?
  email      String?
  availability Availability @default(Disponible)
  experience Int
  assignedChildren Assignment[]
  schedules  Schedule[] @relation("NannySchedules")
  user       User?     @relation("NannyUser")
  reports    Report[]
  center     Center?   @relation(fields: [centerId], references: [id])
  centerId   String?
  cotisationPaidUntil DateTime?
  lastCotisationAmount  Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Child {
  id         String   @id @default(uuid())
  name       String
  age        Int
  sexe       Sexe     @default(masculin)
  group      ChildGroup @default(G1)
  parents   ParentChild[]
  allergies  String?
  cotisationPaidUntil DateTime?
  assignments Assignment[]
  reports    Report[]
  center     Center?  @relation(fields: [centerId], references: [id])
  centerId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  feedPosts   FeedPost[]
  photoConsents PhotoConsent[] @relation("ChildPhotoConsents")
}

model Assignment {
  id        String   @id @default(uuid())
  date      DateTime
  child     Child    @relation(fields: [childId], references: [id])
  childId   String
  nanny     Nanny    @relation(fields: [nannyId], references: [id])
  nannyId   String
  center    Center?  @relation(fields: [centerId], references: [id])
  centerId  String?
  createdAt DateTime @default(now())
}

model Schedule {
  id        String   @id @default(uuid())
  date      DateTime
  startTime String
  endTime   String
  name      String
  comment   String?
  nannies   Nanny[] @relation("NannySchedules")
  center    Center? @relation(fields: [centerId], references: [id])
  centerId  String?
}

model Report {
  id               String   @id @default(uuid())
  priority         String   
  type             String  
  status           String   
  childId          String
  nannyId          String
  summary          String
  details          String
  date             DateTime
  time             String   
  duration         String?  
  childrenInvolved Int?     

  child            Child    @relation(fields: [childId], references: [id])
  nanny            Nanny    @relation(fields: [nannyId], references: [id])
  center           Center?  @relation(fields: [centerId], references: [id])
  centerId         String?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Center {
  id        String   @id @default(uuid())
  name      String
  users     User[]
  parents   Parent[]
  children  Child[]
  nannies   Nanny[]
  assignments Assignment[]
  schedules Schedule[]
  reports   Report[]
  feedPosts FeedPost[]
  createdAt DateTime @default(now())
}

model Subscription {
  id                   String   @id @default(uuid())
  userId               String
  stripeSubscriptionId String?  @unique
  plan                 String
  status               String
  trialStart           DateTime?
  trialEnd             DateTime?
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean  @default(false)
  canceledAt           DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
}

model AbandonedSignupReminder {
  id         String   @id @default(uuid())
  userId     String   @unique
  sentCount  Int      @default(0)
  lastSentAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}

// Feed & media for announcements / photos
model FeedPost {
  id         String     @id @default(uuid())
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  center     Center?    @relation(fields: [centerId], references: [id])
  centerId   String?
  childId    String?
  child      Child?     @relation(fields: [childId], references: [id])
  text       String?
  visibility FeedVisibility @default(CENTER)
  medias     FeedMedia[]
  likes      FeedLike[]
  comments   FeedComment[]
  createdAt  DateTime   @default(now())
}

model FeedMedia {
  id           String   @id @default(uuid())
  post         FeedPost @relation(fields: [postId], references: [id])
  postId       String
  type         String
  url          String
  thumbnailUrl String?
  size         Int?
  createdAt    DateTime @default(now())
}

model FeedLike {
  id        String   @id @default(uuid())
  post      FeedPost @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model FeedComment {
  id        String   @id @default(uuid())
  post      FeedPost @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  text      String
  createdAt DateTime @default(now())
}

model PhotoConsent {
  id        String   @id @default(uuid())
  child     Child    @relation("ChildPhotoConsents", fields: [childId], references: [id])
  childId   String
  parent    Parent   @relation("ParentPhotoConsents", fields: [parentId], references: [id])
  parentId  String
  consent   Boolean  @default(false)
  grantedAt DateTime?
  createdAt DateTime @default(now())

  @@unique([childId, parentId])
}

enum FeedVisibility {
  CENTER
  PARENTS
  PUBLIC
}